#!/bin/sh

this_script=$(basename $(realpath $0))
lib_dir="$(dirname $(realpath $0))/../lib/onie"

args="qhv"

usage()
{
    echo "usage: $this_script [-hvq]"
    cat <<EOF
Regenerate the final GRUB configuration file from fragments.

COMMAND LINE OPTIONS

	-h
		Help.  Print this message.

	-q
		Quiet.  No printing, except for errors.

	-v
		Be verbose.  Print what is happening.
EOF
}

quiet=no
verbose=no
cmd_verbose=

while getopts "$args" a ; do
    case $a in
        h)
            usage
            exit 0
            ;;
        v)
            verbose=yes
            cmd_verbose=-v
            ;;
        q)
            quiet=yes
            ;;
        *)
            echo "Unknown argument: $a"
            usage
            exit 1
    esac
done

[ "$verbose" = "yes" ] && quiet=no

[ -r "$lib_dir/onie-blkdev-common" ] || {
    echo "ERROR: Unable to find onie-blkdev-common"
    exit 1
}
. $lib_dir/onie-blkdev-common

[ "$verbose" = "yes" ] && echo "Mounting ONIE partitions ..."
onie_mount_partitions write || {
    echo "ERROR: Unable to mount ONIE partitions"
    exit 1
}

# Construct the grub.cfg file from fragments

grub_cfg="$(mktemp)"
(cat <<EOF
#
# DO NOT EDIT THIS FILE
#
# It is automatically generated by $this_script using fragments
# from ONIE-CONFIG/grub.d 
#
# Genreated on $(date)
#
EOF
) > $grub_cfg

cat /etc/machine.conf >> $grub_cfg
cat << ___EOF___ >> $grub_cfg
## Begin grub-common.cfg

serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1
terminal_input serial
terminal_output serial
set timeout=5

CMDLINE_LINUX_SERIAL="console=ttyS0,115200n8"

onie_submenu="ONIE (Version: \$onie_version)"
onie_menu_install="ONIE: Install OS"
export onie_menu_install
onie_menu_rescue="ONIE: Rescue"
export onie_menu_rescue
onie_menu_uninstall="ONIE: Uninstall OS"
export onie_menu_uninstall
onie_menu_update="ONIE: Update ONIE"
export onie_menu_update

set default="\${onie_submenu}>\${onie_menu_install}"

## End grub-common.cfg
___EOF___
cat $onie_config_dir/grub.d/*            >> $grub_cfg

onie_mode_file="$onie_config_dir/onie_boot_reason"
user_default_file="$onie_config_dir/onie_default"
if [ -r "$onie_mode_file" ] ; then
    # The ONIE boot mode takes precedence
    echo "# default from ONIE boot mode"    >> $grub_cfg
    echo "default="'"${onie_submenu}>${onie_menu_'"$(cat $onie_mode_file)"'}"' >> $grub_cfg
else
    if [ -r "$user_default_file" ] ; then
        echo "# default from User menu default"    >> $grub_cfg
        echo "default="'"'"$(cat $user_default_file)"'"' >> $grub_cfg
    fi
fi

cat << ___EOF___  >> $grub_cfg
## Begin grub-onie.cfg

set fallback="\${onie_submenu}>\${onie_menu_rescue}"

ONIE_CMDLINE_LINUX="quiet console=tty0 \$CMDLINE_LINUX_SERIAL \$ONIE_PLATFORM_ARGS \$ONIE_DEBUG_ARGS"
export ONIE_CMDLINE_LINUX

function onie_entry_start {
  insmod gzio
  insmod part_msdos
  insmod ext2
  set root='(/dev/sda,msdos1)'
  search --no-floppy --label --set=root BOOT
}

function onie_entry_end {
  echo "Version   : \$onie_version"
  echo "Build Date: \$onie_build_date"
}

submenu "\$onie_submenu" {

        # Install OS must be first, as it is the assumed default menu entry.
        menuentry "\$onie_menu_install" --class gnu-linux --class onie {
                onie_entry_start
                echo    "ONIE: OS Installer Mode ..."
                linux   /onie.vmlinuz \$ONIE_CMDLINE_LINUX
                initrd  /onie.initrd
                onie_entry_end
        }
         
        menuentry "\$onie_menu_rescue" --class gnu-linux --class onie {
                onie_entry_start
                echo    "ONIE: Rescue Mode ..."
                linux   /onie.vmlinuz \$ONIE_CMDLINE_LINUX boot_reason=rescue
                initrd  /onie.initrd
                onie_entry_end
        }
         
        menuentry "\$onie_menu_uninstall" --class gnu-linux --class onie {
                onie_entry_start
                echo    "ONIE: OS Uninstall Mode ..."
                linux   /onie.vmlinuz \$ONIE_CMDLINE_LINUX boot_reason=uninstall
                initrd  /onie.initrd
                onie_entry_end
        }
         
        menuentry "\$onie_menu_update" --class gnu-linux --class onie {
                onie_entry_start
                echo    "ONIE: ONIE Update Mode ..."
                linux   /onie.vmlinuz \$ONIE_CMDLINE_LINUX boot_reason=update
                initrd  /onie.initrd
                onie_entry_end
        }

}

## End grub-onie.cfg
___EOF___

onie_grub_cfg="${onie_config_dir}/grub.cfg"

# Save existing config file
[ -r "$onie_grub_cfg" ] && {
    [ "$verbose" = "yes" ] && echo "Backing up existing configuration to ${onie_grub_cfg}.bak"
    mv -f "$onie_grub_cfg" "${onie_grub_cfg}.bak"
}

mv $grub_cfg $onie_grub_cfg

# Copy the file to GRUB directory

[ -r $common_boot_mnt/grub/grub.cfg ] && {
    [ "$verbose" = "yes" ] && echo "Backing up existing configuration to $common_boot_mnt/grub/grub.cfg.bak"
    cp -f $common_boot_mnt/grub/grub.cfg $common_boot_mnt/grub/grub.cfg.bak
}

[ "$verbose" = "yes" ] && echo "Installing $common_boot_mnt/grub/grub.cfg"

cp $onie_grub_cfg $common_boot_mnt/grub/grub.cfg.new
mv $common_boot_mnt/grub/grub.cfg.new $common_boot_mnt/grub/grub.cfg

sync

# Find first menuentry
first_img=$(grep menuentry "$onie_grub_cfg" | head -n 1 | sed -e "s/^[^'\"]*['\"]//" -e "s/['\"].*$//")

# Find default image -- grub.cfg is constructed so that the effective
# 'set default=' line appears last, even if the user manages to
# specify earlier definitions.  Hence the use of 'tail -n 1' here.
default_img=$(grep default= "$onie_grub_cfg" | tail -n 1 | sed -e 's/set//' -e 's/.*default=//' -e "s/['\"]//g")
if [ -z "$default_img" ] ; then
    echo "WARNING: No defaut image specified.  Using first menu entry."
    default_img="$first_img"
fi

[ "$quiet" = "no" ] && echo "Default boot image: $default_img"

[ "$verbose" = "yes" ] && echo "Un-mounting ONIE partitions ..."
onie_umount_partitions

[ "$quiet" = "no" ] && echo "Success: ONIE boot configuration updated."
exit 0
